Test Cases
Assume All Inputs are Enclosed in Commas
-------------------
Inputs
""

Expected Output
No Argument

Output
No Argument

-------------------
Inputs


Expected Output
No Argument

Output
No Argument

-------------------
Inputs
test

Expected Output
word test

Output
word test

-------------------
Inputs
0x33F

Expected Output
Hexadecimal 0x33F

Output
Hexadecimal 0x33F

-------------------
Inputs
15.32

Expected Output
Floating Point 15.32

Output
Floating Point 15.32

-------------------
Inputs
1.575e1

Expected Output
Floating Point 1.575e1

Output
Floating Point 1.575e1

--------------------
Inputs
1.575e-1

Expected Output
Floating Point 1.575e-1

Output
Floating Point 1.575e-1
---------------------
Inputs
" array[xyz ] += pi 3.14159e-10 "

Expected Output

word array
Left brace [
word xyz
Right brace ]
Plus Equals +=
word pi
Floating Point 3.14159e-10

Output

word array
Left brace [
word xyz
Right brace ]
Plus Equals +=
word pi
Floating Point 3.14159e-10

-----------------------
Inputs:
"    "

Expected Output: 
*Blank Output*

Output:
*Blank Output*
------------------------
Inputs:
"0327"

Expected Output: 
Octal 0327

Output:
Octal 0327

------------------------
Inputs:
"0327"

Expected Output: 
Octal 0327

Output:
Octal 0327


------------------------
Inputs:
"0327test0327"

Expected Output: 
Octal 0327
word test
Octal 0327

Output:
Octal 0327
word test
Octal 0327


------------------------
Inputs:
"03270x32F"

Expected Output: 
Octal 0327
Hexadecimal 0x32F

Output:
Octal 0327
Hexadecimal 0x32F


------------------------
Inputs:
"1.5eeee5"

Expected Output: 
Floating Point 1.5
Word eeee
Decimal 5

Output:
Floating Point 1.5
Word eeee
Decimal 5



------------------------
Inputs:
"+-#!@#$%^&*()-="

Expected Output: 
Additon +
Subtraction -
Hash #
Not / Exclamation !
At @
Hash #
Currency $
Modulus %
Exclusive Or / Carret ^
Bitwise and / Ampersand &
Multiplication *
Left Parenthesis (
Right Parenthesis )
Minus Equals -=


Output:
Additon +
Subtraction -
Hash #
Not / Exclamation !
At @
Hash #
Currency $
Modulus %
Exclusive Or / Carret ^
Bitwise and / Ampersand &
Multiplication *
Left Parenthesis (
Right Parenthesis )
Minus Equals -=


------------------------
Inputs:
".35"

Expected Output: 
Floating Point .35


Output:
Floating Point .35

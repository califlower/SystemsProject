Test Cases
Assume All Inputs are Enclosed in Commas
-------------------
Inputs - Null Case
""

Expected Output
No Argument

Output
No Argument

-------------------
Inputs - Null Case


Expected Output
No Argument

Output
No Argument

-------------------
Inputs - Word Case
test

Expected Output
word test

Output
word test

-------------------
Inputs - Decimal Case
"532523"

Expected Output:
Decimal 532523

Output:
Decimal 532523

-------------------
Inputs - Hex Case
0x33F 

Expected Output
Hexadecimal 0x33F

Output
Hexadecimal 0x33F

-------------------
Inputs - Floating Point Case
15.32 

Expected Output
Floating Point 15.32

Output
Floating Point 15.32

-------------------
Inputs - Special Floating Point Cases
1.575e1

Expected Output
Floating Point 1.575e1

Output
Floating Point 1.575e1

--------------------
Inputs
" array[xyz ] += pi 3.14159e-10 " - Case From Assignment

Expected Output

word array
Left brace [
word xyz
Right brace ]
Plus Equals +=
word pi
Floating Point 3.14159e-10

Output

word array
Left brace [
word xyz
Right brace ]
Plus Equals +=
word pi
Floating Point 3.14159e-10

-----------------------
Inputs:
"    " - Empty Spaces Case

Expected Output: 
*Blank Output*

Output:
*Blank Output*

-----------------------

Inputs:
"0327" - Octal Case

Expected Output: 
Octal 0327

Output:
Octal 0327

------------------------
Inputs:
"0327test0327" - Octal/word Case

Expected Output: 
Octal 0327
word test
Octal 0327

Output:
Octal 0327
word test
Octal 0327

------------------------
Inputs: - Octal/Hex Cases
"03270x32F"

Expected Output: 
Octal 0327
Hexadecimal 0x32F

Output:
Octal 0327
Hexadecimal 0x32F

------------------------
Inputs:
"1.5eeee5" - Special floating point cases

Expected Output: 
Floating Point 1.5
Word eeee
Decimal 5

Output:
Floating Point 1.5
Word eeee
Decimal 5

------------------------
Inputs:
"+-#!@#$%^&*()-=" - Special Symbols

Expected Output: 
Additon +
Subtraction -
Hash #
Not / Exclamation !
At @
Hash #
Currency $
Modulus %
Exclusive Or / Carret ^
Bitwise and / Ampersand &
Multiplication *
Left Parenthesis (
Right Parenthesis )
Minus Equals -=

Output:
Additon +
Subtraction -
Hash #
Not / Exclamation !
At @
Hash #
Currency $
Modulus %
Exclusive Or / Carret ^
Bitwise and / Ampersand &
Multiplication *
Left Parenthesis (
Right Parenthesis )
Minus Equals -=

------------------------
Inputs:
".35" - Also considered a floating point

Expected Output: 
Floating Point .35


Output:
Floating Point .35

------------------------
Inputs:
"\t" - Escape character

Expected Output: 
Escape Character [0x09]


Output:
Escape Character [0x09]
-----------------------
Inputs:
"afsafsaf24140X3523560019xas0Xsdsad4214214214.53253E2.4eesadsa." - Treat .4 as a floating point as well

Expected Output:
word afsafsaf
Decimal 2414
Hexadecimal 0X3523560019
word xas
Hexadecimal 0X
word sdsad
Floating Point 4214214214.53253E2
Decimal Point .
Decimal 4
word eesadsa
Decimal Point .

Output:
word afsafsaf
Decimal 2414
Hexadecimal 0X3523560019
word xas
Hexadecimal 0X
word sdsad
Floating Point 4214214214.53253E2
Decimal Point .
Decimal 4
word eesadsa
Decimal Point .
-------------------------------
Inputs:
"afsafsf0X0x012321" - Treat 0x0 as a hex, and the lone 'x' as a word in this case.

Expected Outputs:
word afsafsf
Hexadecimal 0X0 
word x
Octal 012321

Output:
word afsafsf
Hexadecimal 0X0
word x
Octal 012321

------------------------------
Inputs:
"afsafsf0X0x01232\t\n\r" - Special Escape Character Case

Expected Outputs:
word afsafsf
Hexadecimal 0X0
word x
Octal 01232
Escape Character [0x09]
Escape Character [0x0A]
Escape Character [0x0D]

Outputs:
word afsafsf
Hexadecimal 0X0
word x
Octal 01232
Escape Character [0x09]
Escape Character [0x0A]
Escape Character [0x0D]


